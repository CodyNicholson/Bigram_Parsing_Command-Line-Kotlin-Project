/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package cli.app

import cli.app.bigram_parser.BigramParser
import cli.app.bigram_parser.ErrorConsts
import cli.app.bigram_parser.impl.BigramParserImpl
import cli.app.bigram_parser.models.Bigram
import cli.app.error.BigramParsingError
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFailsWith

class AppTest {

    var bigramParser: BigramParser = BigramParserImpl()
    val pathToTestingFiles = "src/test/resources/testingFiles"

    //region parseBigram
    @Test
    fun parseBigram_validDataNoSpecialChars_success() {
        val input = "${pathToTestingFiles}//validDataNoSpecialChars.txt"
        val expectedBigram1 = Bigram(firstWord = "the", secondWord = "quick", count = 2)
        val expectedBigram2 = Bigram(firstWord = "quick", secondWord = "brown", count = 1)
        val expectedBigram3 = Bigram(firstWord = "brown", secondWord = "fox", count = 1)
        val expectedBigram4 = Bigram(firstWord = "fox", secondWord = "and", count = 1)
        val expectedBigram5 = Bigram(firstWord = "and", secondWord = "the", count = 1)
        val expectedBigram6 = Bigram(firstWord = "quick", secondWord = "blue", count = 1)
        val expectedBigram7 = Bigram(firstWord = "blue", secondWord = "hare", count = 1)
        val expectedBigramList = arrayListOf(expectedBigram1, expectedBigram2, expectedBigram3, expectedBigram4, expectedBigram5, expectedBigram6, expectedBigram7)

        val outputBigramList = bigramParser.parseBigram(input)

        assertEquals(expectedBigramList, outputBigramList)
    }

    @Test
    fun parseBigram_validDataWithSpecialChars_success() {
        val input = "${pathToTestingFiles}//validDataWithSpecialChars.txt"
        val expectedBigram1 = Bigram(firstWord = "hi", secondWord = "i", count = 2)
        val expectedBigram2 = Bigram(firstWord = "i", secondWord = "am", count = 1)
        val expectedBigram3 = Bigram(firstWord = "am", secondWord = "checking", count = 1)
        val expectedBigram4 = Bigram(firstWord = "checking", secondWord = "if", count = 1)
        val expectedBigram5 = Bigram(firstWord = "if", secondWord = "the", count = 1)
        val expectedBigram6 = Bigram(firstWord = "the", secondWord = "this", count = 1)
        val expectedBigram7 = Bigram(firstWord = "this", secondWord = "works", count = 1)
        val expectedBigram8 = Bigram(firstWord = "works", secondWord = "does", count = 1)
        val expectedBigram9 = Bigram(firstWord = "does", secondWord = "it", count = 1)
        val expectedBigram10 = Bigram(firstWord = "it", secondWord = "123", count = 2)
        val expectedBigram11 = Bigram(firstWord = "123", secondWord = "it", count = 1)
        val expectedBigramList = arrayListOf(expectedBigram1, expectedBigram2, expectedBigram3, expectedBigram4, expectedBigram5, expectedBigram6, expectedBigram7, expectedBigram8, expectedBigram9, expectedBigram10, expectedBigram11)

        val outputBigramList = bigramParser.parseBigram(input)

        assertEquals(expectedBigramList, outputBigramList)
    }

    @Test
    fun parseBigram_invalidOneWordInput_400() {
        val input = "${pathToTestingFiles}/invalidOneWordInput.txt"
        val expectedBigramException = BigramParsingError(ErrorConsts.FEWER_THAN_TWO_WORDS_PROVIDED)

        val actualException = assertFailsWith<BigramParsingError> {
            bigramParser.parseBigram(input)
        }

        assertEquals(expectedBigramException.javaClass, actualException.javaClass)
        assertEquals(expectedBigramException.message, actualException.message)
    }

    @Test
    fun parseBigram_invalidEmptyInput_400() {
        val input = "${pathToTestingFiles}//invalidEmptyInput.txt"
        val expectedBigramException = BigramParsingError(ErrorConsts.FEWER_THAN_TWO_WORDS_PROVIDED)

        val actualException = assertFailsWith<BigramParsingError> {
            bigramParser.parseBigram(input)
        }

        assertEquals(expectedBigramException.javaClass, actualException.javaClass)
        assertEquals(expectedBigramException.message, actualException.message)
    }

    @Test
    fun parseBigram_invalidFilePath_404() {
        val input = "${pathToTestingFiles}//fileDoesNotExist.txt"
        val expectedBigramException = BigramParsingError(ErrorConsts.FILE_NOT_FOUND)

        val actualException = assertFailsWith<BigramParsingError> {
            bigramParser.parseBigram(input)
        }

        assertEquals(expectedBigramException.javaClass, actualException.javaClass)
        assertEquals(expectedBigramException.message, actualException.message)
    }
    //endregion

    //region filterSpecialCharsAndLowercaseText
    @Test
    fun filterSpecialCharsAndLowercaseText_withSpecialCharsAndUppercaseLetters_success() {
        val privateFilterSpecialCharsAndLowercaseTextMethod = bigramParser.javaClass.getDeclaredMethod("filterSpecialCharsAndLowercaseText", String::class.java)
        privateFilterSpecialCharsAndLowercaseTextMethod.isAccessible = true
        val inputParams = arrayOf("HI, I'm a STRING with <\$pecial> (chars); & UPPERcase letterS!?!?!")
        val expectedOutput = "hi i'm a string with \$pecial chars & uppercase letters"

        val actualOutput = privateFilterSpecialCharsAndLowercaseTextMethod.invoke(bigramParser, *inputParams)

        assertEquals(expectedOutput, actualOutput)
    }

    @Test
    fun filterSpecialCharsAndLowercaseText_withSpecialCharsNoUppercaseLetters_success() {
        val privateFilterSpecialCharsAndLowercaseTextMethod = bigramParser.javaClass.getDeclaredMethod("filterSpecialCharsAndLowercaseText", String::class.java)
        privateFilterSpecialCharsAndLowercaseTextMethod.isAccessible = true
        val inputParams = arrayOf("hey! how are you? what are ; for? idk, man:")
        val expectedOutput = "hey how are you what are  for idk man"

        val actualOutput = privateFilterSpecialCharsAndLowercaseTextMethod.invoke(bigramParser, *inputParams)

        assertEquals(expectedOutput, actualOutput)
    }

    @Test
    fun filterSpecialCharsAndLowercaseText_noSpecialCharsWithUppercaseLetters_success() {
        val privateFilterSpecialCharsAndLowercaseTextMethod = bigramParser.javaClass.getDeclaredMethod("filterSpecialCharsAndLowercaseText", String::class.java)
        privateFilterSpecialCharsAndLowercaseTextMethod.isAccessible = true
        val inputParams = arrayOf("HELLO tHERE")
        val expectedOutput = "hello there"

        val actualOutput = privateFilterSpecialCharsAndLowercaseTextMethod.invoke(bigramParser, *inputParams)

        assertEquals(expectedOutput, actualOutput)
    }

    @Test
    fun filterSpecialCharsAndLowercaseText_noSpecialCharsNoUppercaseLetters_success() {
        val privateFilterSpecialCharsAndLowercaseTextMethod = bigramParser.javaClass.getDeclaredMethod("filterSpecialCharsAndLowercaseText", String::class.java)
        privateFilterSpecialCharsAndLowercaseTextMethod.isAccessible = true
        val inputParams = arrayOf("hello there")
        val expectedOutput = "hello there"

        val actualOutput = privateFilterSpecialCharsAndLowercaseTextMethod.invoke(bigramParser, *inputParams)

        assertEquals(expectedOutput, actualOutput)
    }
}
